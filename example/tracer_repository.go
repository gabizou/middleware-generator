// Code generated by "logger-middleware Repository RepoMiddleware tracer"; DO NOT EDIT.

package example

import (
	"context"
	domain "example/domain"

	zipkingo "github.com/openzipkin/zipkin-go"
)

func NewRepositoryTracer(tracer zipkingo.Tracer) RepoMiddleware {
	return func(r Repository) Repository {
		return &tracerR{
			r:  r,
			tr: tracer,
		}
	}
}

type tracerR struct {
	tr zipkingo.Tracer
	r  Repository
}

func (t *tracerR) Bar(ctx context.Context, astruct struct {
	name string
}) **interface {
	aFunc(inner func(ctx context.Context, uint2 uint) (string, error, unexported))
} {
	span, ctx := t.tr.StartSpanFromContext(ctx, "Bar")

	defer func() {
		span.Finish()
	}()

	return t.r.Bar(ctx, astruct)
}
func (t *tracerR) Baz(ctx context.Context) func(ctx context.Context) error {
	span, ctx := t.tr.StartSpanFromContext(ctx, "Baz")

	defer func() {
		span.Finish()
	}()

	return t.r.Baz(ctx)
}
func (t *tracerR) Find(ctx context.Context, id string) (*domain.Foo, error) {
	span, ctx := t.tr.StartSpanFromContext(ctx, "Find")

	defer func() {
		span.Finish()
	}()

	return t.r.Find(ctx, id)
}
func (t *tracerR) Foo(ctx context.Context) (int, bool, []*domain.Foo, []*[]interface{}, map[string]*interface{}) {
	span, ctx := t.tr.StartSpanFromContext(ctx, "Foo")

	defer func() {
		span.Finish()
	}()

	return t.r.Foo(ctx)
}
